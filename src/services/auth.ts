import UserAuthService from "../services/userAuthService";

export interface AuthData {
  userId: string | null;
  permissions: string[];
}

const authService = new UserAuthService();

// H√†m th·ª±c hi·ªán ƒëƒÉng nh·∫≠p ng∆∞·ªùi d√πng v√† l·∫•y quy·ªÅn
export const authenticateUser = async (
  username: string,
  password: string
): Promise<AuthData> => {
  try {
    const user = await authService.emailPasswordLogin(username, password);
    console.log("üöÄ ~ file: auth.ts:11 ~ authenticateUser ~ user:", user);
    if (user) {
      const permissions = authService.getUserPermissions(user.id);
      // L∆∞u d·ªØ li·ªáu ng∆∞·ªùi d√πng v√†o localStorage
      localStorage.setItem(
        "userData",
        JSON.stringify({ userId: user.id, permissions })
      );
      console.log("[I] userData ƒë√£ ƒë∆∞·ª£c l∆∞u");
      return { userId: user.id, permissions };
    } else {
      return { userId: null, permissions: [] };
    }
  } catch (error) {
    console.error("L·ªói khi x√°c th·ª±c ng∆∞·ªùi d√πng:", error);
    return { userId: null, permissions: [] };
  }
};

// H√†m th·ª±c hi·ªán ƒëƒÉng xu·∫•t ng∆∞·ªùi d√πng
export const performLogout = (): void => {
  authService.logout();
};

// H√†m ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
export const isUserLoggedIn = (): boolean => {
  // Ki·ªÉm tra xem c√≥ th√¥ng tin ƒëƒÉng nh·∫≠p trong localStorage hay kh√¥ng
  let userDataString = localStorage.getItem("userData");
  console.log(userDataString);
  if (userDataString == null) userDataString = "{}";
  let authData = JSON.parse(userDataString) as AuthData;
  if (authData.userId == null || userDataString == null) return false;
  else return true;
};

// useAuthorization.js
// (Ti·∫øp t·ª•c vi·∫øt code trong file useAuthorization.js)
