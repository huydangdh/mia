// src/components/usermanagement/useAuthorization.ts

import { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { setUser, clearUser } from "../../redux/userSlice";
import IApp from "../common/IApp";
import { EPermissions } from "../../PermissionsUtil";
import AbstractUserAuthService from "../../services/interface/AbstractUserAuthService";
import { AuthData } from "../../services/model/MMUser";

interface UserAuthorizationHook {
  // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ quy·ªÅn truy c·∫≠p v√†o permission hay kh√¥ng
  hasPermission: (permission: string | string[]) => boolean;
  // H√†m x·ª≠ l√Ω ƒëƒÉng nh·∫≠p ng∆∞·ªùi d√πng
  login: (username: string, password: string) => Promise<AuthData>;
  // H√†m x·ª≠ l√Ω ƒëƒÉng xu·∫•t ng∆∞·ªùi d√πng
  logout: () => void;
  // Tr·∫°ng th√°i ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p hay ch∆∞a
  isLoggedIn: boolean;
  // Th√¥ng tin ng∆∞·ªùi d√πng
  userData: AuthData;
  // Bi·∫øn ƒë√°nh d·∫•u tr·∫°ng th√°i loading c·ªßa hook
  loading: boolean;
  // H√†m l·∫•y danh s√°ch c√°c ·ª©ng d·ª•ng ƒë∆∞·ª£c ph√¢n quy·ªÅn d·ª±a tr√™n danh s√°ch permissions
  getAppsByPermission: (apps: IApp[], permissions: string[]) => IApp[];
}

const USER_DATA_KEY = "userData";

// Hook qu·∫£n l√Ω x√°c th·ª±c v√† ph√¢n quy·ªÅn ng∆∞·ªùi d√πng
export const useAuthorization = (
  authService: AbstractUserAuthService
): UserAuthorizationHook => {
  // Kh·ªüi t·∫°o userData t·ª´ localStorage ho·∫∑c set n√≥ th√†nh tr·∫°ng th√°i r·ªóng
  const initialUserData: AuthData = JSON.parse(
    localStorage.getItem(USER_DATA_KEY) ||
      `{
      "user": {
        "id": null
      }
    }`
  );
  const [userData, setUserData] = useState<AuthData>(initialUserData);
  console.log("üöÄ ~ file: UserAuthorization.tsx:39 ~ userData:", userData);
  const isLoggedIn = useSelector((state) => state.user.isLoggedIn);
  const dispatch = useDispatch();

  // Bi·∫øn ƒë√°nh d·∫•u tr·∫°ng th√°i loading
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    if (authService === null) {
      localStorage.clear();
      // ƒê√°nh d·∫•u tr·∫°ng th√°i loading l√† false sau khi userData ƒë√£ ƒë∆∞·ª£c ƒë·ªçc t·ª´ localStorage
      setLoading(false);
    }
  });

  useEffect(() => {
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i isLoggedIn khi userData thay ƒë·ªïi
    if (userData.user.id !== null) {
      dispatch(setUser(userData));
    } else {
      dispatch(clearUser());
    }
    localStorage.setItem(USER_DATA_KEY, JSON.stringify(userData));

    // ƒê√°nh d·∫•u tr·∫°ng th√°i loading l√† false sau khi userData ƒë√£ ƒë∆∞·ª£c ƒë·ªçc t·ª´ localStorage
    setLoading(false);
  }, [userData, dispatch]);

  // H√†m ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ quy·ªÅn truy c·∫≠p v√†o c√°c permissions ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh hay kh√¥ng
  const hasPermission = (permissions: EPermissions[]): boolean => {
    // Ki·ªÉm tra xem userData c√≥ t·ªìn t·∫°i v√† c√≥ √≠t nh·∫•t m·ªôt trong c√°c permissions t·ªìn t·∫°i trong m·∫£ng permissions
    if (userData && Array.isArray(permissions)) {
      return permissions.some((permission) =>
        userData.user.permissions.includes(permission)
      );
    } else if (userData && typeof permissions === "string") {
      return userData.user.permissions.includes(permissions);
    }

    return false;
  };

  // H√†m x·ª≠ l√Ω ƒëƒÉng nh·∫≠p ng∆∞·ªùi d√πng
  const login = async (
    username: string,
    password: string
  ): Promise<AuthData> => {
    const authData: AuthData = await authService.emailPasswordLogin(
      username,
      password
    );

    if (authData.user.id !== null) {
      localStorage.setItem(USER_DATA_KEY, JSON.stringify(authData));
      dispatch(setUser(authData));
    }
    return authData;
  };

  // H√†m x·ª≠ l√Ω ƒëƒÉng xu·∫•t ng∆∞·ªùi d√πng
  const logout = async (): Promise<void> => {
    // X√≥a th√¥ng tin userData kh·ªèi localStorage khi ƒëƒÉng xu·∫•t
    localStorage.removeItem(USER_DATA_KEY);
    await authService.logout();
    dispatch(clearUser());
  };

  // H√†m l·∫•y danh s√°ch ·ª©ng d·ª•ng d·ª±a tr√™n permissions ng∆∞·ªùi d√πng
  const getAppsByPermission = (
    apps: IApp[],
    permissions: EPermissions[]
  ): IApp[] => {
    // L·ªçc danh s√°ch apps d·ª±a tr√™n permissions c·ªßa ng∆∞·ªùi d√πng
    return apps.filter((app) =>
      permissions.some((permission) => app.permissions.includes(permission))
    );
  };

  return {
    hasPermission,
    login,
    logout,
    isLoggedIn,
    userData,
    loading,
    getAppsByPermission,
  };
};
